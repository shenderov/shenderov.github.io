name: Deploy to GitHub Pages

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Override version'
        required: true

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build_and_version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      # Set up Ruby for Jekyll
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.5'
          bundler-cache: true

      - name: Install dependencies
        run: bundle install

      # Load current version and branch from version.json
      - name: Load current version and branch
        id: load_version
        run: |
          if [ -f _data/version.json ]; then
            branch=$(cat _data/version.json | jq -r '.branch')
            version=$(cat _data/version.json | jq -r '.version')
          else
            branch=""
            version="0.0.0"
          fi
          echo "::set-output name=current_branch::$branch"
          echo "::set-output name=current_version::$version"

      # Determine version (bump if needed, or use provided version)
      - name: Determine Version
        id: determine_version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            new_version="${{ github.event.inputs.version_override }}"
            echo "Using provided version: $new_version"
          else
            branch_name=${{ github.head_ref }}
            current_version="${{ steps.load_version.outputs.current_version }}"
            major=$(echo $current_version | cut -d. -f1)
            minor=$(echo $current_version | cut -d. -f2)
            patch=$(echo $current_version | cut -d. -f3)

            # Logic for version bump
            if [[ "$branch_name" == major/* || "$branch_name" == version/* ]]; then
              major=$((major + 1))
              minor=0
              patch=0
            elif [[ "$branch_name" == feature/* || "$branch_name" == minor/* ]]; then
              minor=$((minor + 1))
              patch=0
            elif [[ "$branch_name" == update/* || "$branch_name" == fix/* ]]; then
              patch=$((patch + 1))
            fi

            new_version="$major.$minor.$patch"
            echo "Bumped version: $new_version"
          fi
          echo "::set-output name=new_version::$new_version"

      # Update version.json with the new version and the current branch
      - name: Update version.json
        run: |
          build_number=$GITHUB_RUN_NUMBER
          timestamp=$(date +%Y%m%d)
          branch_name=${{ github.head_ref }}

          jq -n --arg version "${{ steps.determine_version.outputs.new_version }}" --arg build "$build_number" --arg timestamp "$timestamp" --arg branch "$branch_name" \
            '{version: $version, build: $build, timestamp: $timestamp, branch: $branch}' > _data/version.json

      # Commit the updated version.json file
      - name: Commit version changes
        if: github.event_name != 'workflow_dispatch' || github.head_ref != 'main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add _data/version.json
          git commit -m "Update version to ${{ steps.determine_version.outputs.new_version }} [skip ci]"
          git push origin ${{ github.head_ref }}

      # Build the Jekyll site
      - name: Build the Jekyll site
        env:
          JEKYLL_ENV: production
        run: bundle exec jekyll build --destination ./_site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./_site

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_version

    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4

      # If the entire workflow succeeded, update version.json with build and timestamp, and create a tag
      - name: Update version.json with build and timestamp after success
        if: github.head_ref == 'main'
        run: |
          build_number=$GITHUB_RUN_NUMBER
          timestamp=$(date +%Y%m%d)
          current_version=$(cat _data/version.json | jq -r '.version')

          jq '.build = $build | .timestamp = $timestamp' --arg build "$build_number" --arg timestamp "$timestamp" _data/version.json > _data/version.json

          git add _data/version.json
          git commit -m "Update build number and timestamp"
          git push origin main

      - name: Create and push Git tag
        if: github.head_ref == 'main'
        run: |
          current_version=$(cat _data/version.json | jq -r '.version')
          git tag "v$current_version"
          git push origin "v$current_version"