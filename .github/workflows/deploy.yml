name: Deploy to GitHub Pages

on:
  pull_request:
    types:
      - opened
      - synchronize
      - closed

  workflow_dispatch:
    inputs:
      version_override:
        description: 'Override version'
        required: true

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build_and_version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.5'
          bundler-cache: true

      - name: Install dependencies
        run: bundle install

      - name: Load current version from version.json
        id: load_version
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: |
          if [ -f _data/version.json ]; then
            echo "Contents of version.json:"
            cat _data/version.json
            
            # Use jq to extract value
            version=$(jq -r '.version' _data/version.json)

            if [[ -z "$version" || "$version" == "null" ]]; then
              version="0.0.0"
            fi
          else
            echo "version.json not found, setting defaults"
            version="0.0.0"
          fi
          echo "current_version=$version" >> $GITHUB_ENV
          
      - name: Bump Version
        id: bump_version
        if: ${{ github.event_name != 'workflow_dispatch' }}
        run: |
          current_version="${{ env.current_version }}"
          branch_name=${{ github.head_ref || github.ref }}
          major=$(echo $current_version | cut -d. -f1)
          minor=$(echo $current_version | cut -d. -f2)
          patch=$(echo $current_version | cut -d. -f3)

          if [[ "$branch_name" == major/* || "$branch_name" == version/* ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ "$branch_name" == feature/* || "$branch_name" == minor/* ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ "$branch_name" == update/* || "$branch_name" == fix/* ]]; then
            patch=$((patch + 1))
          fi

          new_version="$major.$minor.$patch"
          echo "Bumped version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: Update version.json
        run: |
          branch_name=${{ github.head_ref || github.ref }}
          build_number=$GITHUB_RUN_NUMBER
          timestamp=$(date +%Y%m%d)
          
          # Check if new_version exists, otherwise use the version_override input
          if [ -n "${{ env.new_version }}" ]; then
            version="${{ env.new_version }}"
          else
            version="${{ github.event.inputs.version_override }}"
          fi
      
          # Create the JSON file using jq
          jq -n --arg version "$version" \
                --arg branch "$branch_name" \
                --arg build "$build_number" \
                --arg timestamp "$timestamp" \
                '{version: $version, branch: $branch, build: $build, timestamp: $timestamp}' > _data/version.json
      
          if [ -f _data/version.json ]; then
            echo "Contents of new version.json:"
            cat _data/version.json
          fi

      - name: Build the Jekyll site
        env:
          JEKYLL_ENV: production
        run: bundle exec jekyll build --destination ./_site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

      - name: Upload version file
        uses: actions/upload-artifact@v4
        with:
          name: version
          path: _data/version.json

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_version

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        if: github.event.pull_request.merged != true
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Delete existing version.json
        run: rm -f _data/version.json

      - name: Download version.json artifact
        uses: actions/download-artifact@v4
        with:
          name: version
          path: _data/

      - name: Copy version file
        run: |
          cat _data/version.json

      - name: Update version.json with build and timestamp after success
        if: github.event.pull_request.merged == true
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add _data/version.json
          git commit -m "Update build number and timestamp"
          git push origin main

      - name: Create and push Git tag
        if: github.event.pull_request.merged == true
        run: |
          current_version=$(cat _data/version.json | jq -r '.version')
          git tag "v$current_version"
          git push origin "v$current_version"